// ==========================================================
// Swatches
// ==========================================================

.createSmartSwatch(@sName, @sFill:#fff, @sText:auto, @sHeading:auto, @sComment:auto, @sLink:auto, @sLinkHover:auto, @sSwatchSensitivity:50%, @sHoverIntensity:4%, @sBorderIntensity:3%, @sBorder:darken(@sFill, @sBorderIntensity*2), @sBorderDisabled:darken(@sFill, @sBorderIntensity), @sBorderActive:darken(@sFill, @sBorderIntensity*4), @sBorderOverlay:darken(@sFill, @sBorderIntensity*5), @sCustomStyles:false,  @sjQueryUI:false) {
    .colorCheck (@property:color, @color:#fff, @intensity:100%) when (luma(@color) >= @sSwatchSensitivity) {
      & when (@property = color) {
        @{property}: fade(black, @intensity);
      }
      & when (@property = background) {
        @{property}: darken(@color, @intensity);
      }
    }
    .colorCheck (@property:color, @color:#fff, @intensity:100%) when (luma(@color) < @sSwatchSensitivity) {
      & when (@property = color) {
        @{property}: fade(white, @intensity);
      }
      & when (@property = background) {
        @{property}: darken(@color, @intensity);
      }
    }
    .createTextColors() {
        & when (@sText = auto) {
          .colorCheck(color, @sFill, 70%);
        }
        & when not (@sText = auto) {
          color: @sText;
        }
        & when (@sHeading = auto) {
            h1, h2, h3, h4, h5, h6 {
                .colorCheck(color, @sFill, 70%);
            }
        }
        & when not (@sHeading = auto) {
            h1, h2, h3, h4, h5, h6 {
                color: @sHeading;
            }
        }
        & when (@sComment = auto) {
            .atk-comment, a.atk-comment:not([class*="atk-button"]):not([class*="atk-swatch"]),
            .atk-comment a:not([class*="atk-button"]):not([class*="atk-swatch"]) {
                .colorCheck(color, @sFill, 50%);
            }
            a.atk-comment:not([class*="atk-button"]):not([class*="atk-swatch"]):hover,
            .atk-comment a:not([class*="atk-button"]):not([class*="atk-swatch"]):hover {
                .colorCheck(color, @sFill, 60%);
            }
        }
        & when not (@sComment = auto) {
            .atk-comment, a.atk-comment:not([class*="atk-button"]):not([class*="atk-swatch"]) {
                color: @sComment;
            }
            a.atk-comment:not([class*="atk-button"]):not([class*="atk-swatch"]):hover {
                color: darken(@sComment, 10%);
            }
        }
        & when (@sLink = auto) {
            a:not([class*="atk-button"]):not([class*="atk-swatch"]), a&:not([class*="atk-button"]) {
                .colorCheck(color, @sFill, 90%);
                & when (@sLinkHover = auto) {
                    &:hover {
                        .colorCheck(color, @sFill, (90% + @sHoverIntensity*4));
                    }
                }
            }
        }
        & when not (@sLink = auto) {
            a:not([class*="atk-button"]):not([class*="atk-swatch"]), a&:not([class*="atk-button"]) {
                color: @sLink;
                & when (@sLinkHover = auto) {
                    &:hover {
                        color: darken(@sLink, @sHoverIntensity*4);
                    }
                }
            }
        }
        & when not (@sLinkHover = auto) {
            a:not([class*="atk-button"]):not([class*="atk-swatch"]), a&:not([class*="atk-button"]) {
                &:hover {
                    color: @sLinkHover;
                }
            }
        }
        & [class*="atk-border"][class*="-static"], &[class*="atk-border"][class*="-static"], hr,
        &[class*="atk-border"][class*="-static"][class*="atk-popover"] .atk-popoverArrow:before {
            border-color: @sBorder;
        }
        & [class*="atk-border"][class*="-disabled"], &[class*="atk-border"][class*="-disabled"], [class*="atk-lister"]>*:not([class*="atk-border"]),
        [class*="atk-table"][class*="-separated"] tbody>tr>td, [class*="atk-table"][class*="-separated"] thead>tr>th,
        & hr[class*="-disabled"],
        &[class*="atk-border"][class*="-disabled"][class*="atk-popover"] .atk-popoverArrow:before {
            border-color: @sBorderDisabled;
        }
        & [class*="atk-border"][class*="-active"], &[class*="atk-border"][class*="-active"],
        & hr[class*="atk-border"][class*="-active"],
        &[class*="atk-border"][class*="-active"][class*="atk-popover"] .atk-popoverArrow:before {
            border-color: @sBorderActive;
        }
        & [class*="atk-border"][class*="-overlay"], &[class*="atk-border"][class*="-overlay"],
        & hr[class*="atk-border"][class*="-overlay"],
        &[class*="atk-border"][class*="-overlay"][class*="atk-popover"] .atk-popoverArrow:before {
            border-color: @sBorderOverlay;
        }
        [class*="atk-table"][class*="-zebra"] tbody tr:nth-child(odd) td:not([class*="atk-swatch"]) {
            background-color: darken(@sFill, 2%);
        }
        [class*="atk-menu"][class*="-separated"], &[class*="atk-menu"][class*="-separated"] {
            >li+li:not([class*="atk-border"]) {
                border-color: @sBorder;
            }
        }
    }
    .createWidgetColors() {
        &.atk-box {
            background-color: @sFill;
            border-color: @sBorder;
        }
        input:not([type="submit"]):not([type="button"]):not([type="radio"]):not([type="checkbox"]), textarea,
        a&[class*="atk-button"], input&[class*="atk-button"], button&[class*="atk-button"],
        .ui-state-default, .ui-widget-content .ui-state-default {
            border-color: @sBorderActive;
        }
        a&[class*="atk-button"], input&[class*="atk-button"], button&[class*="atk-button"],
        .ui-state-default, .ui-widget-content .ui-state-default {
            .colorCheck(color, @sFill);
            background-color: @sFill;
            &:hover {
                background-color: darken(@sFill,@sHoverIntensity);
                border-color: darken(@sBorderActive,@sHoverIntensity);
            }
        }
        &[class*="atk-button"][class*="-blank"] {
            color: @sFill !important;
        }
        &[class*="atk-border"][class*="-outline"] {
            &, &[class*="atk-button"] {
            background-color: transparent;
            border-color: @sFill;   
            color: @sFill;
            }
            &[class*="atk-button"]:hover {
                .colorCheck(color, @sFill);
                background-color: @sFill;
                border-color: @sFill;
            }
        }
        &[class*="atk-popover"].atk-box .atk-popoverArrow:before {
            background-color: @sFill;
            border-color: @sBorder;
        }
        a&[class*="atk-swatch"]:not([class*="atk-button"]):not([class*="--text"]) {
          &:hover {
            .colorCheck(background, @sFill, @sHoverIntensity);
          }
        }
        & when not (@sCustomStyles = false) {
            @sCustomStyles();
        }
    }
    .createjQueryUI() {
        .ui-widget {
            color: @sText;
        }
        .ui-widget-hover {
            &.ui-state-hover {
                background: darken(@sFill, @sHoverIntensity);
            }
        }
        .ui-widget-content {
            background: @sFill;
            border-color: @sBorder;
        }
        .ui-tabs {
            .ui-tabs-nav.ui-widget-header {
                border-bottom: 1px solid @sBorder;
                .ui-state-default {
                    a:not([class*="atk-button"]):not([class*="atk-swatch"]) {
                        & when (@sText = auto) {
                          .colorCheck(color, @sFill, 50%);
                          &:hover {
                            .colorCheck(color, @sFill, 70%);
                          }
                        }
                        & when not (@sText = auto) {
                          color: fade(@sText, 70%);
                          &:hover {
                            color: @sText;
                          }
                        }
                    }
                    &.ui-state-active {
                      background: @sFill;
                      border-color: @sBorder;
                      a:not([class*="atk-button"]):not([class*="atk-swatch"]) {
                        & when (@sText = auto) {
                          .colorCheck(color, @sFill, 70%);
                        }
                        & when not (@sText = auto) {
                          color: @sText;
                        }
                      }
                    }
                }
            }
            .ui-tabs-panel.ui-widget-content {
                border: 1px solid @sBorder;
                border-top: none;
            }
        }
        .ui-accordion {
            .ui-accordion-header {
                &.ui-state-active {
                    background: @sFill;
                    border-color: @sBorder;
                    border-bottom-color: @sFill;
                }
            }
            .ui-accordion-content {
                border-color: @sBorder;
            }
        }
        .ui-dialog {
            border-color: @sBorderOverlay;
            .ui-widget-header.ui-dialog-titlebar {
                .ui-button.ui-dialog-titlebar-close {
                    .colorCheck(color, @sFill, 20%);
                    &:hover {
                        .colorCheck(color, @sFill, 30%);
                    }
                }
            }
            .ui-widget-header.ui-dialog-titlebar {
                border-bottom: 1px solid @sBorder;
            }
            .ui-dialog-buttonset {
                border-top: 1px solid @sBorder;
            }
        }
    }
    .createjQueryUISingular() {
        .ui-datepicker {
            &.ui-widget-content {
                border-color: @sBorderOverlay;
            }
            .ui-datepicker-header {
                color: @sText;
            }
            table.ui-datepicker-calendar tr {
              a, a:hover {
                  color: @sText;
              }
            }
        }
        .ui-selectmenu-menu .ui-menu {
            border: 1px solid @sBorderOverlay;
        }
    }
    & when (@sName = default) {
        .createWidgetColors();
        .createjQueryUISingular();
        body, .atk-swatch-@{sName},
        [class*="atk-swatch"]:not(.atk-swatch-default) .box:not([class*="atk-swatch"]),
        [class*="atk-swatch"]:not(.atk-swatch-default) .atk-swatch-default {
            .createTextColors();
            .createjQueryUI();
        }
        .atk-swatch-@{sName}--text {
            color: @sFill;
            a&:hover {
              color: darken(@sFill, @sHoverIntensity*4);
            }
        }
        .atk-swatch-@{sName}, .atk-swatch-@{sName}--fill {
            background-color: @sFill;
            &, &[class*="atk-popover"] .atk-popoverArrow:before {
              background-color: @sFill;
            }
        }
    }
    & when not (@sName = default) {
        .atk-swatch-@{sName} {
            background-color: @sFill;
            .createWidgetColors();
            .createTextColors();
            & when not (@sjQueryUI = false) {
              .createjQueryUI();
            }
            &[class*="icon"] {
                background: none;
                color: @sFill;
            }
        }
        .atk-swatch-@{sName}--text {
            color: @sFill;
            a&:hover {
              color: darken(@sFill, @sHoverIntensity*4);
            }
        }
        .atk-swatch-@{sName}--fill {
            background-color: @sFill;
            &, &[class*="atk-popover"] .atk-popoverArrow:before {
              background-color: @sFill;
            }
        }
    }
}


// ==========================================================
// Effects
// ==========================================================

.createEffect(@name, @color) {
  @bgColor: tint(@color, 90%);
  .atk-effect-@{name} {
    background-color: @bgColor;
    color: @color;
    &[class*="atk-button"], a& {
      color: @color !important;
    }
    &.atk-box {
      background: @bgColor !important;
      border-color: @color !important;
    }
    input& {
      border-color: @color !important;
    }
  }
  .atk-effect-@{name}--fill {
    background-color: @bgColor !important;
  }
  .atk-effect-@{name}--text {
    color: @color !important;
  }
}
.createEffect(success, @effectSuccess);
.createEffect(info, @effectInfo);
.createEffect(warning, @effectWarning);
.createEffect(danger, @effectDanger);