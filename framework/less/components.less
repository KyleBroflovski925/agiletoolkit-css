// ==========================================================
// Components
// ==========================================================

// Settings
@buttonDefaultShadow: 0 1px 0 rgba(0,0,0,0.07);
@space:      round(@margin, 1);
@space-xs:   round(@margin/3, 1);
@space-s:    round(@margin/2, 1);
@space-l:    round(@margin*2, 1);
@space-xl:   round(@margin*3, 1);

// Cells
.atk-cells {
    display:table;
    width: 100%;
    >.atk-cell {
        display: table-cell;
        vertical-align: middle;
    }
    &[class*=atk-move] {
        width: auto;
    }
}
.atk-cells-group {
    display: table;
    >.atk-cells {
        display: table-row;
    }
}
.atk-cells-table {
    display: table;
    .atk-cells-group {
        display: table-row-group;
    }
    >.atk-cells {
        display: table-row;
    }
}
[data-cells*=justified] {
    table-layout: fixed;
}
[data-cells*=spacing] {
    &.atk-cells>.atk-cell,
    &.atk-cells-group>.atk-cells>.atk-cell {
        padding-left: @space/2;
        padding-right: @space/2;
        &:first-child {
            padding-left: 0;
        }
        &:last-child {
            padding-right: 0;
        }
    }
}
[data-cells*=spacing-xl] {
    &.atk-cells>.atk-cell,
    &.atk-cells-group>.atk-cells>.atk-cell {
        padding-left: @space-xl/2;
        padding-right: @space-xl/2;
    }
}
[data-cells*=spacing-l] {
    &.atk-cells>.atk-cell,
    &.atk-cells-group>.atk-cells>.atk-cell {
        padding-left: @space-l/2;
        padding-right: @space-l/2;
    }
}
[data-cells*=spacing-s] {
    &.atk-cells>.atk-cell,
    &.atk-cells-group>.atk-cells>.atk-cell {
        padding-left: @space-s/2;
        padding-right: @space-s/2;
    }
}
[data-cells*=spacing-xs] {
    &.atk-cells>.atk-cell,
    &.atk-cells-group>.atk-cells>.atk-cell {
        padding-left: @space-xs/2;
        padding-right: @space-xs/2;
    }
}

// Lister
.atk-lister {
    > * {
        padding-bottom: @space;
        + * {
            border-top-style: solid;
            border-top-width: 1px;
            padding-top: @space;
        }
        &:last-child:not([data-padding]) {
            padding-bottom: 0 !important;
        }
    }
    &[data-lister*=spacing-reset] {
        > * {
            padding-bottom: 0;
            + * {
                padding-top: 0;
            }
        }
    }
    &[data-lister*=spacing-xs] {
        > * {
            padding-bottom: @space-xs;
            + * {
                padding-top: @space-xs;
            }
        }
    }
    &[data-lister*=spacing-s] {
        > * {
            padding-bottom: @space-s;
            + * {
                padding-top: @space-s;
            }
        }
    }
    &[data-lister*=spacing-l] {
        > * {
            padding-bottom: @space-l;
            + * {
                padding-top: @space-l;
            }
        }
    }
    &[data-lister*=spacing-xl] {
        > * {
            padding-bottom: @space-xl;
            + * {
                padding-top: @space-xl;
            }
        }
    }
    // &.atk-lister-nomargin {
    //     > *:not([class*=atk-padding]) {
    //         padding-bottom: 0;
    //         + *:not([class*=atk-padding]) {
    //             padding-top: 0;
    //         }
    //     }
    // }
}

// Buttons
.createButton() {
    .border-radius(@cornerRadius);
    border-style: solid;
    border-width: 1px;
    display: inline-block;
    font-weight: bold;
    line-height: @bodyBaseline;
    text-align: center;
    white-space: nowrap;
    &:not([data-padding]) {
        padding: (0.5em * @baselineDestroyer) (1em * @baselineDestroyer);
    }
}
a, button, input {
    &[class*=atk-button] {
        .createButton;
    }
}
.ui-button {
    .createButton;
}
[class*=atk-button] {
    &:not([data-padding]) {
        &[data-button*=spacing-s] {
            padding: (0.25em * @baselineDestroyer) (0.5em * @baselineDestroyer);
        }
        &[data-button*=spacing-xs] {
            padding: (0.12em * @baselineDestroyer) (0.25em * @baselineDestroyer);
        }
        &[data-button*=spacing-l] {
            padding: (0.75em * @baselineDestroyer) (1.5em * @baselineDestroyer);
        }
        &[data-button*=spacing-xl] {
            padding: (1em * @baselineDestroyer) (2em * @baselineDestroyer);
        }
    }
    &[data-button*=blank] {
        background: none !important;
        border-color: transparent !important;
        box-shadow: none !important;
    }
    .atk-buttonset>& {
        .border-radius(0);
        &:first-child {
            .border-left-radius(@cornerRadius);
        }
        &:last-child {
            .border-right-radius(@cornerRadius);
        }
        + * {
            border-left: none;
        }
    }
}
ul[class*=atk-menu] {
    &:not(.atk-cells) {
        display: inline-block;
    }
    list-style-type: none;
    margin-bottom: 0;
    margin-right: 0;
    margin-top: 0;
    padding: 0;
    white-space: nowrap;
    >li {
        .clear-fix;
        display: inline-block;
        position: relative;
        >a[class*='atk-button'] {
            .box-sizing(content-box);
            min-width: 1em;
        }
            .atk-label {
                &[class*='icon']:before {
                    margin: 0;
                }
            }
        >a {
            display: inline-block;
            white-space: nowrap;
        }
        *[class*=atk-menu]:not(.atk-menu-separated) {
            .clear-ul;
            display: none;
            z-index: 99;
            &[data-menu-position="right"] {
                left: auto !important;
                right: 0;
            }
        }
        &:hover {
            *[class*=atk-menu] {
                display: block;
            }
            &[class*=atk-swatch] {
                >a[class*=atk-swatch] {
                    background: none;
                    color: inherit !important;
                }
            }
        }
    }
    &[data-menu*=horizontal] {
        >li {
            >a {
                *[class*='icon']:before {
                    margin: 0;
                }
            }
            *[class*=atk-menu]:not([data-menu*=separated]) {
                .position(@t:100%, @l:0);
                min-width: 100%;
                &[data-menu*=right] {
                    left: auto;
                    right: 0;
                }
            }
        }
    }
    &[data-menu*=vertical] {
        display: block;
        >li {
            display: block;
            a {
                display: block;
                float: none;
                &[class*=atk-button] {
                    text-align: left;
                }
            }
            *[class*=atk-menu]:not([data-menu*=separated]) {
                .position(@t:0, @l:100%);
            }
        }
    }
    &[data-menu*=separated] {
        >li+li {
            border-left-width: 1px;
            border-left-style: solid;
        }
    }
}

// Box
*[class*=atk-box] {
    &, .ui-tabs &.ui-tabs-panel.ui-widget-content {
        .border-radius(@cornerRadius);
        border: 1px solid transparent;
        display: block;
        margin-bottom: @margin;
        padding: @space;
        &:last-child {
            margin-bottom: 0;
        }
    }
}

// Label
.atk-label {
    .border-radius(@cornerRadius);
    display: inline;
    padding: (0.2em * @baselineDestroyer) (0.5em * @baselineDestroyer);
    white-space: nowrap;
}

// Grid
.atk-grid.atk-row {
    margin-left: -@margin  * @baselineDestroyer;
    margin-top: -@margin  * @baselineDestroyer;
    *[class^=atk-col] {
        border-left-width: @margin  * @baselineDestroyer;
        margin-top: @margin  * @baselineDestroyer;
    }
    &.atk-grid-gutter-xsmall {
        margin-left: (-@margin  * @baselineDestroyer)/4;
        margin-top: (-@margin  * @baselineDestroyer)/4;
        *[class^=atk-col] {
            border-left-width: (@margin  * @baselineDestroyer)/4;
            margin-top: (@margin  * @baselineDestroyer)/4;
        }
    }
    &.atk-grid-gutter-small {
        margin-left: (-@margin  * @baselineDestroyer)/2;
        margin-top: (-@margin  * @baselineDestroyer)/2;
        *[class^=atk-col] {
            border-left-width: (@margin  * @baselineDestroyer)/2;
            margin-top: (@margin  * @baselineDestroyer)/2;
        }
    }
    &.atk-grid-gutter-large {
        margin-left: (-@margin  * @baselineDestroyer)*2;
        margin-top: (-@margin  * @baselineDestroyer)*2;
        *[class^=atk-col] {
            border-left-width: (@margin  * @baselineDestroyer)*2;
            margin-top: (@margin  * @baselineDestroyer)*2;
        }
    }
}

// Helpers
.atk-inline {
    display: inline-block !important;
}
.atk-block {
    display: block !important;
}
.atk-jackscrew, .atk-expand {
    width: 100% !important;
}
.atk-width-auto {
    width: auto !important;
}
.atk-clear-fix {
    .clear-fix;
}

// Positioning
.atk-move-left {
    float: left;
}
.atk-move-center {
    float: none !important;
    margin-left: auto !important;
    margin-right: auto !important;
    &.atk-button {
        display: block;
    }
}
.atk-move-right {
    float: right;
}
[data-align*=left] {
  text-align: left !important;
}
[data-align*=right] {
  text-align: right !important;
}
[data-align*=center] {
  text-align: center !important;
}
[data-align*=top] {
  &, &.atk-cells>.atk-cell {
    vertical-align: top !important;
  }
}
[data-align*=bottom] {
  &, &.atk-cells>.atk-cell {
    vertical-align: bottom !important;
  }
}
[data-align*=middle] {
  &, &.atk-cells>.atk-cell {
    vertical-align: middle !important;
  }
}

// Effects
*[class*=atk-effect] {
    &, &[class*='atk-button'] {
        &.atk-effect-danger {
            color: @effectDanger !important;
        }
        &.atk-effect-warning {
            color: @effectWarning !important;
        }
        &.atk-effect-success {
            color: @effectSuccess !important;
        }
        &.atk-effect-info {
            color: @effectInfo !important;
        }
    }
    &.atk-label, &[class*=atk-box] {
        &.atk-effect-danger {
            @color: tint(@effectDanger, 90%);
            background-color: @color !important;;
            border-color: @color !important;;
            &, h1, h2, h3, h4, h5, h6 {
                color: multiply(@effectDanger, #999) !important;;
            }
        }
        &.atk-effect-warning {
            @color: tint(@effectWarning, 90%);
            background-color: @color !important;;
            border-color: @color !important;;
            &, h1, h2, h3, h4, h5, h6 {
                color: multiply(@effectWarning, #999) !important;;
            }
        }
        &.atk-effect-success {
            @color: tint(@effectSuccess, 90%);
            background: @color !important;;
            border-color: @color !important;;
            &, h1, h2, h3, h4, h5, h6 {
                color: multiply(@effectSuccess, #999) !important;;
            }
        }
        &.atk-effect-info {
            @color: tint(@effectInfo, 90%);
            background-color: @color !important;;
            border-color: @color !important;;
            &, h1, h2, h3, h4, h5, h6 {
                color: multiply(@effectInfo, #999) !important;;
            }
        }
    }
    &.atk-effect-danger {
        input[type="text"],
        input[type="url"],
        input[type="email"],
        input[type="password"],
        input[type="search"],
        input[type="number"],
        input[type="date"],
        input[type="month"],
        input[type="week"],
        input[type="time"],
        input[type="datetime"],
        input[type="datetime-local"],
        input[type="tel"],
        textarea,
        .ui-selectmenu-button  {
            border-color: @effectDanger;
        }
    }
}
.atk-disabled {
    .opacity(50);
    pointer-events: none;
}


// ==========================================================
// Spacing
// ==========================================================

.createSpace(@property:padding) {
    @data-property: ~'data-@{property}';

    // All
    &[@{data-property}*='all'] {
        @{property}: @space;
    }
    &[@{data-property}*='all-xs'] {
        @{property}: @space-xs;
    }
    &[@{data-property}*='all-s'] {
        @{property}: @space-s;
    }
    &[@{data-property}*='all-l'] {
        @{property}: @space-l;
    }
    &[@{data-property}*='all-xl'] {
        @{property}: @space-xl;
    }

    // Bottom
    &[@{data-property}*='bottom'] {
        @{property}-bottom: @space;
    }
    &[@{data-property}*='bottom-xs'] {
        @{property}-bottom: @space-xs;
    }
    &[@{data-property}*='bottom-s'] {
        @{property}-bottom: @space-s;
    }
    &[@{data-property}*='bottom-l'] {
        @{property}-bottom: @space-l;
    }
    &[@{data-property}*='bottom-xl'] {
        @{property}-bottom: @space-xl;
    }

    // Left
    &[@{data-property}*='left'] {
        @{property}-left: @space;
    }
    &[@{data-property}*='left-xs'] {
        @{property}-left: @space-xs;
    }
    &[@{data-property}*='left-s'] {
        @{property}-left: @space-s;
    }
    &[@{data-property}*='left-l'] {
        @{property}-left: @space-l;
    }
    &[@{data-property}*='left-xl'] {
        @{property}-left: @space-xl;
    }

    // Right
    &[@{data-property}*='right'] {
        @{property}-right: @space;
    }
    &[@{data-property}*='right-xs'] {
        @{property}-right: @space-xs;
    }
    &[@{data-property}*='right-s'] {
        @{property}-right: @space-s;
    }
    &[@{data-property}*='right-l'] {
        @{property}-right: @space-l;
    }
    &[@{data-property}*='right-xl'] {
        @{property}-right: @space-xl;
    }

    // Top
    &[@{data-property}*='top'] {
        @{property}-top: @space;
    }
    &[@{data-property}*='top-xs'] {
        @{property}-top: @space-xs;
    }
    &[@{data-property}*='top-s'] {
        @{property}-top: @space-s;
    }
    &[@{data-property}*='top-l'] {
        @{property}-top: @space-l;
    }
    &[@{data-property}*='top-xl'] {
        @{property}-top: @space-xl;
    }

    // Reset
    &[@{data-property}*='all-reset'] {
        @{property}: 0 !important;
    }
    &[@{data-property}*='bottom-reset'] {
        @{property}-bottom: 0 !important;
    }
    &[@{data-property}*='left-reset'] {
        @{property}-left: 0 !important;
    }
    &[@{data-property}*='right-reset'] {
        @{property}-right: 0 !important;
    }
    &[@{data-property}*='top-reset'] {
        @{property}-top: 0 !important;
    }
}
.createSpace(padding);
.createSpace(margin);

.atk-space-xsmall {
    height: @space-xs
}
.atk-space-small {
    height: @space-s;
}
.atk-space {
    height: @space;
}
.atk-space-large {
    height: @space-l;
}
.atk-space-xlarge {
    height: @space-xl;
}


// ==========================================================
// Swatches
// ==========================================================

.createSmartSwatch(@sName, @sFill:#fff, @sText:auto, @sHeading:auto, @sComment:auto, @sLink:auto, @sLinkHover:auto, @sSwatchSensitivity:50%, @sHoverIntensity:4%, @sBorderIntensity:3%, @sBorder:darken(@sFill, @sBorderIntensity*2), @sBorderDisabled:darken(@sFill, @sBorderIntensity), @sBorderActive:darken(@sFill, @sBorderIntensity*4), @sBorderOverlay:darken(@sFill, @sBorderIntensity*5)) {
    .colorCheck (@property:color, @color:#fff, @intensity:100%) when (luma(@color) >= @sSwatchSensitivity) {
      & when (@property = color) {
        @{property}: fade(black, @intensity);
      }
      & when (@property = background) {
        @{property}: darken(@color, @intensity);
      }
    }
    .colorCheck (@property:color, @color:#fff, @intensity:100%) when (luma(@color) < @sSwatchSensitivity) {
      & when (@property = color) {
        @{property}: fade(white, @intensity);
      }
      & when (@property = background) {
        @{property}: lighten(@color, @intensity);
      }
    }
    .createTextColors() {
        & when (@sText = auto) {
          .colorCheck(color, @sFill, 70%);
        }
        & when not (@sText = auto) {
          color: @sText;
        }
        & when (@sHeading = auto) {
            h1, h2, h3, h4, h5, h6 {
                .colorCheck(color, @sFill, 70%);
            }
        }
        & when not (@sHeading = auto) {
            h1, h2, h3, h4, h5, h6 {
                color: @sHeading;
            }
        }
        & when (@sComment = auto) {
            .atk-comment {
                .colorCheck(color, @sFill, 50%);
            }
        }
        & when not (@sComment = auto) {
            .atk-comment {
                color: @sComment;
            }
        }
        & when (@sLink = auto) {
            a:not([class*=atk-button]):not([class*=atk-swatch]), a&:not([class*=atk-button]) {
                .colorCheck(color, @sFill, 90%);
                & when (@sLinkHover = auto) {
                    &:hover {
                        .colorCheck(color, @sFill, (90% + @sHoverIntensity*4));
                    }
                }
            }
        }
        & when not (@sLink = auto) {
            a:not([class*=atk-button]):not([class*=atk-swatch]), a&:not([class*=atk-button]) {
                color: @sLink;
                & when (@sLinkHover = auto) {
                    &:hover {
                        color: darken(@sLink, @sHoverIntensity*4);
                    }
                }
            }
        }
        & when not (@sLinkHover = auto) {
            a:not([class*=atk-button]):not([class*=atk-swatch]), a&:not([class*=atk-button]) {
                &:hover {
                    color: @sLinkHover;
                }
            }
        }
        &[data-border], & [data-border*=static], &[data-border*=static], hr {
            border-color: @sBorder;
        }
        & [data-border*=disabled], &[data-border*=disabled], .atk-lister>*:not([data-border]),
        .atk-table[data-table*=bordered] tbody>tr+tr>td, .atk-table[data-table*=bordered] thead>tr>th,
        & hr[data-border*=disabled] {
            border-color: @sBorderDisabled;
        }
        & [data-border*=active], &[data-border*=active], & hr[data-border*=active] {
            border-color: @sBorderActive;
        }
        & [data-border*=overlay], &[data-border*=overlay], & hr[data-border*=overlay] {
            border-color: @sBorderOverlay;
        }
        .atk-table[data-table*=hover] {
            table tbody tr:hover td {
                background: darken(@sFill, @sHoverIntensity/2);
            }
        }
        .atk-menu[data-menu*=separated], &.atk-menu[data-menu*=separated] {
            >li+li:not([data-border]) {
                border-color: @sBorder;
            }
        }
    }
    .createWidgetColors() {
        &[class*=atk-box] {
            background-color: @sFill;
            border-color: @sBorder;
        }
        &[class*=atk-button],
        .ui-state-default, .ui-widget-content .ui-state-default {
            background-color: @sFill;
            border-color: @sBorderActive;
            .colorCheck(color, @sFill);
            &:hover {
                background-color: darken(@sFill,@sHoverIntensity);
                border-color: darken(@sBorderActive,@sHoverIntensity);
            }
        }
        &.atk-button[data-button*=blank] {
            color: @sFill !important;
        }
        &[data-border*=outline] {
            &, &[class*=atk-button] {
            background-color: transparent;
            border-color: @sFill;   
            color: @sFill;
            }
            &[class*=atk-button]:hover {
                .colorCheck(color, @sFill);
                background-color: @sFill;
                border-color: @sFill;
            }
        }
        &.atk-popover, &.atk-popover[class*=atk-box] {
            border-color: @sBorderOverlay;
            .atk-popover-arrow:before {
                background-color: @sFill;
                border-color: @sBorderOverlay;
            }
        }
        a&[class*=atk-swatch]:not([class*=atk-button]) {
          &:hover {
            .colorCheck(background, @sFill, @sHoverIntensity);
          }
        }
    }
    .createjQueryUI() {
        .ui-widget {
            color: @sText;
        }
        .ui-widget-hover {
            &.ui-state-hover {
                background: darken(@sFill, @sHoverIntensity);
            }
        }
        .ui-widget-content {
            background: @sFill;
            border-color: @sBorder;
        }
        .ui-tabs {
            .ui-tabs-nav.ui-widget-header {
                border-bottom: 1px solid @sBorderActive;
                .ui-state-default.ui-state-active {
                    border-color: @sBorderActive;
                }
            }
            .ui-tabs-panel.ui-widget-content {
                border: 1px solid @sBorder;
                border-top: none;
            }
        }
        .ui-accordion {
            .ui-accordion-header {
                &.ui-state-active {
                    background: @sFill;
                    border-color: @sBorder;
                    border-bottom-color: @sFill;
                }
            }
            .ui-accordion-content {
                border-color: @sBorder;
            }
        }
        .ui-datepicker {
            border-color: @sBorderOverlay;
            .ui-datepicker-header {
                color: @sText;
            }
        }
        .ui-dialog {
            border-color: @sBorderOverlay;
            .ui-widget-header.ui-dialog-titlebar {
                .ui-button.ui-dialog-titlebar-close {
                    .colorCheck(color, @sFill, 30%);
                    &:hover {
                        .colorCheck(color, @sFill, 40%);
                    }
                }
            }
            .ui-dialog-buttonset {
                border-top: 1px solid @borderStatic;
            }
        }
        .ui-selectmenu-menu .ui-menu {
            border: 1px solid @sBorderOverlay;
        }
    }
    & when (@sName = atk-swatch-default) {
        .createWidgetColors();
        body, .@{sName},
        [class*=atk-swatch]:not([class*=atk-swatch-default]) [class*=atk-box]:not([class*=atk-swatch]),
        [class*=atk-swatch]:not([class*=atk-swatch-default]) [class*=atk-swatch-default] {
            .createTextColors();
            .createjQueryUI();
        }
        .@{sName} {
          background-color: @sFill;
        }
    }
    & when not (@sName = atk-swatch-default) {
        .@{sName} {
            background-color: @sFill;
            .createWidgetColors();
            .createTextColors();
            .createjQueryUI();
            &[class*=icon] {
                background: none;
                color: @sFill;
            }
        }
        .@{sName}-text {
            color: @sFill;
            a&:hover {
              color: darken(@sFill, @sHoverIntensity*4);
            }
        }
        .@{sName}-fill {
            background-color: @sFill;
            &, &.atk-popover .atk-popover-arrow:before {
              background-color: @sFill;
            }
        }
    }
}


// ==========================================================
// Visuals
// ==========================================================

// Shapes
[data-shape*='rectangle'] {
    &, input& {
        border-radius: 0;
    }
}
[data-shape*='rounded'] {
    &, img&, input&  {
        .border-radius(@cornerRadius);
    }
}
[data-shape*='rounded-top'] {
     &, img&, input&  {
        .border-radius(0);
        .border-top-radius(@cornerRadius);
    }
}
[data-shape*='rounded-bottom'] {
     &, img&, input&  {
        .border-radius(0);
        .border-bottom-radius(@cornerRadius);
    }
}
[data-shape*='rounded-left'] {
     &, img&, input&  {
        .border-radius(0);
        .border-left-radius(@cornerRadius);
    }
}
[data-shape*='rounded-right'] {
     &, img&, input&  {
        .border-radius(0);
        .border-right-radius(@cornerRadius);
    }
}
[data-shape*='rounded-top-left'] {
     &, img&, input&  {
        .border-radius(0);
        .border-top-left-radius(@cornerRadius);
    }
}
[data-shape*='rounded-top-right'] {
     &, img&, input&  {
        .border-radius(0);
        .border-top-right-radius(@cornerRadius);
    }
}
[data-shape*='rounded-bottom-left'] {
     &, img&, input&  {
        .border-radius(0);
        .border-bottom-left-radius(@cornerRadius);
    }
}
[data-shape*='rounded-bottom-right'] {
     &, img&, input&  {
        .border-radius(0);
        .border-bottom-right-radius(@cornerRadius);
    }
}
[data-shape*='circle'] {
    display: inline-block;
    &, img&, a&[class*='atk-button'], button&[class*='atk-button'], input&[class*='atk-button'], a&.ui-button, button&.ui-button, input&.ui-button {
        .border-radius(50%);
    }
}

// Borders {
[data-border*=outline] {
    &, &[class*=atk-button], &[class*=swatch] {
        background-color: transparent;
    }
}
[data-border] {
    border-style: solid;
    border-width: 0px;
    &:not([data-border*=left]):not([data-border*=right]):not([data-border*=top]):not([data-border*=bottom]):not(hr) {
      border-width: 1px;
    }
}
[data-border*=reset] {
  &, &.atk-popover .atk-popover-arrow:before {
    border-width: 0px !important;
  }
}
[data-border*=thick] {
  &, &.atk-popover .atk-popover-arrow:before {
    border-width: 2px !important;
  }
  hr& {
    border-width: 2px 0 0 0 !important;
  }
}
[data-border*=bottom] {
  border-right-width: 1px;
}
[data-border*=left] {
  border-left-width: 1px;
}
[data-border*=right] {
  border-right-width: 1px;
}
[data-border*=top] {
  border-top-width: 1px;
}

// Item List
[data-items]>* + * {
    margin-left: @space;
}
[data-items*=spacing-xs]>* + * {
    margin-left: @space-xs;
}
[data-items*=spacing-s]>* + * {
    margin-left: @space-s;
}
[data-items*=spacing-l]>* + * {
    margin-left: @space-l;
}
[data-items*=spacing-xl]>* + * {
    margin-left: @space-xl;
}